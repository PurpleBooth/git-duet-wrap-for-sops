on:
  pull_request:
    types: [closed]
jobs:
  version:
    if: github.event.pull_request.merged == true && !contains( github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - id: get_previous_version
        run: echo ::set-output name=PREVIOUS_VERSION::$(git describe --tags "$(git rev-list --tags --max-count=1)")
        shell: bash
      - id: semvers
        uses: WyriHaximus/github-action-next-semvers@master
        with:
          version: '${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}'
      - run: mkdir -p ./version
      - if: "!contains(github.event.head_commit.message, 'BC BREAK') && !contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_minor }}
      - if: "contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_patch }}
      - run: echo "$VERSION" > ./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_major }}
        if: "contains(github.event.head_commit.message, 'BC BREAK')"
      - uses: actions/upload-artifact@master
        with:
          name: version
          path: ./version/version
  build:
    if: github.event.pull_request.merged == true && !contains( github.event.pull_request.labels.*.name, 'release')
    needs:
      - version
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@v2
      - id: get_version
        run: 'echo ::set-output "name=VERSION::$(cat ./version/version)"'
        shell: bash
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
        run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
      - uses: actions-rs/cargo@v1
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
          REPOSITORY_NAME: '${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}'
        with:
          command: build
          args: '--release'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}-${{ matrix.target }}
          path: ./target/release/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}${{ matrix.suffix }}
  release:
    if: github.event.pull_request.merged == true && !contains( github.event.pull_request.labels.*.name, 'release')
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@v2
      - id: get_version
        run: 'echo ::set-output name=VERSION::$(cat ./version/version)'
        shell: bash
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - run: |
          TEMP_FILE="$(mktemp)"
          toml set Cargo.toml package.version "${VERSION:1}" > "$TEMP_FILE"
          mv "$TEMP_FILE" Cargo.toml
        shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
      - name: Create commits
        run: |
          git config user.name 'GitHub Action[bot]'
          git config user.email '<actions@github.com>'
          git commit -am "Bump cargo version"
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v2
        with:
          token: ${{ secrets.COMITTER_TOKEN }}
          labels: release